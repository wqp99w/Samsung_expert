#include<iostream>
#include <map>
#include <queue>
using namespace std;


struct cell {
	int x;
	int y;
	int size;
	int dir; //상하좌우 1234
};

struct compare {
	bool operator()(const cell& x, const cell& y) {
		return x.size < y.size; //a가 y보다 크면 true니까  a가 더 낮은 우선순위라는 말 
	}
};

int dx[5] = { 0,-1,1,0,0 };
int dy[5] = { 0,0,0,-1,1 };

void change(int& dir) {
	switch (dir)
	{
	case 1:
		dir = 2;
		break;
	case 2:
		dir = 1;
		break;
	case 3:
		dir = 4;
		break;
	case 4:
		dir = 3;
		break;
	default:
		break;
	}
}


int main(int argc, char** argv)
{
	int test_case;
	int T;

	cin >> T;
	
	for (test_case = 1; test_case <= T; ++test_case)
	{
		int n, m, k;
		cin >> n >> m >> k;
		//n은 맵 크기, m은 몇초 있을지, k는 처음 미생물 개수
		map < pair<int, int>, priority_queue<cell, vector<cell>, compare>> save;
		for (int i = 0; i < k; i++) {
			int x, y, size, dir;
			cin >> x >> y >> size >> dir;
			save[{x, y}].push({ x,y,size,dir });
		}
		
		while (m--) {
			map < pair<int, int>, priority_queue<cell, vector<cell>, compare>> temp;
			for (auto& c : save) {
				while (!c.second.empty()) {
					cell tp = c.second.top();
					int nowx = tp.x, nowy = tp.y;
					int nx = nowx + dx[tp.dir];
					int ny = nowy + dy[tp.dir];
					if (nx == 0 || nx == n - 1 || ny == 0 || ny == n - 1) { //빨간 구역에 들가면
						tp.size /= 2;
						change(tp.dir);
					}
					tp.x = nx;
					tp.y = ny;
					c.second.pop();
					if(tp.size>0)
						temp[{tp.x, tp.y}].push(tp);
				}
			}
			for (auto& c : temp) {
				int sum = 0;
				int dir = c.second.top().dir;
				while (!c.second.empty()) {
					sum+= c.second.top().size;
					c.second.pop();
				}
				temp[c.first] .push( { c.first.first, c.first.second, sum, dir });
			}
			save = temp;

		}
		int out = 0;
		for (auto c : save) {
			out += c.second.top().size;
		}
		cout << "#" << test_case << " " << out << endl;
	}
	return 0;//정상종료시 반드시 0을 리턴해야합니다.
}
