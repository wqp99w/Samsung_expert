#include<iostream>
#include <queue>
using namespace std;

char map[9][9];

int dx[8] = { -1,1,0,0,-1,-1,1,1 };
int dy[8] = { 0,0,-1,1,-1,1,-1,1 };

void change(int x, int y, char c, int n) {
	map[x][y] = c;
	for (int i = 0; i < 8; i++) {
		int nx = x + dx[i];
		int ny = y + dy[i];
		if (nx > n || nx <= 0 || ny > n || ny <= 0) continue;
		queue<pair<int, int>> save;
		while (1) {
			if (nx > n || nx <= 0 || ny > n || ny <= 0) break;
			if (map[nx][ny] == '0') break;
			if (map[nx][ny] != '0' && map[nx][ny] != c) //반대 색이 있으면 그건 뒤집을 수 있는거
				save.push({ nx,ny });
			if (map[nx][ny] == c) { //뒤집을 수 있으면 여기까지만 뒤집음
				while (!save.empty()) {
					map[save.front().first][save.front().second] = c;
					save.pop();
				}
				break;
			}
			nx = nx + dx[i];
			ny = ny + dy[i];
		}
	}
}

int main(int argc, char** argv)
{
	int test_case;
	int T;

	cin >> T;

	for (test_case = 1; test_case <= T; ++test_case)
	{
		int n, m;
		cin >> n >> m;
		for (int i = 1; i <= n; i++) {
			for (int j = 1; j <= n; j++) {
				map[i][j] = '0';
			}
		}
		map[n / 2][n / 2] = 'W';
		map[n / 2+1][n / 2+1] = 'W';
		map[n / 2][n / 2+1] = 'B';
		map[n / 2 + 1][n / 2] = 'B';

		while (m--) {
			int x, y, c;
			cin >> x >> y >> c;
			if (c == 1) change(x, y, 'B', n);
			else change(x, y, 'W', n);
			
		}
		int black = 0, white = 0;
		for (int i = 1; i <= n; i++) {
			for (int j = 1; j <= n; j++) {
				if (map[i][j] == 'B') black++;
				else if (map[i][j] == 'W') white++;
			}
		}
		cout << "#" << test_case << " " << black << " " << white << endl;
	}
	return 0;//정상종료시 반드시 0을 리턴해야합니다.
}
